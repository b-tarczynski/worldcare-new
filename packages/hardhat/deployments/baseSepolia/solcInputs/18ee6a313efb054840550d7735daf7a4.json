{
  "language": "Solidity",
  "sources": {
    "contracts/helpers/ByteHasher.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\nlibrary ByteHasher {\n    /// @dev Creates a keccak256 hash of a bytestring.\n    /// @param value The bytestring to hash\n    /// @return The hash of the specified value\n    /// @dev `>> 8` makes sure that the result is included in our field\n    function hashToField(bytes memory value) internal pure returns (uint256) {\n        return uint256(keccak256(abi.encodePacked(value))) >> 8;\n    }\n}\n"
    },
    "contracts/interfaces/IWorldID.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\ninterface IWorldID {\n    /// @notice Reverts if the zero-knowledge proof is invalid.\n    /// @param root The of the Merkle tree\n    /// @param groupId The id of the Semaphore group\n    /// @param signalHash A keccak256 hash of the Semaphore signal\n    /// @param nullifierHash The nullifier hash\n    /// @param externalNullifierHash A keccak256 hash of the external nullifier\n    /// @param proof The zero-knowledge proof\n    /// @dev  Note that a double-signaling check is not included here, and should be carried by the caller.\n    function verifyProof(\n        uint256 root,\n        uint256 groupId,\n        uint256 signalHash,\n        uint256 nullifierHash,\n        uint256 externalNullifierHash,\n        uint256[8] calldata proof\n    ) external view;\n}\n"
    },
    "contracts/WorldCare.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\nimport { ByteHasher } from \"./helpers/ByteHasher.sol\";\nimport { IWorldID } from \"./interfaces/IWorldID.sol\";\n\ncontract WorldCare {\n    address[] public patients;\n    address[] public doctors;\n\n    using ByteHasher for bytes;\n\n    ///////////////////////////////////////////////////////////////////////////////\n    ///                                  ERRORS                                ///\n    //////////////////////////////////////////////////////////////////////////////\n\n    /// @notice Thrown when attempting to reuse a nullifier\n    error InvalidNullifier();\n\n    /// @dev The World ID instance that will be used for verifying proofs\n    IWorldID internal immutable worldId;\n\n    /// @dev The contract's external nullifier hash\n    uint256 internal immutable externalNullifier;\n\n    /// @dev The World ID group ID (always 1)\n    uint256 internal immutable groupId = 1;\n\n    /// @dev Whether a nullifier hash has been used already. Used to guarantee an action is only performed once by a single person\n    mapping(uint256 => bool) internal nullifierHashes;\n\n    /// @param _worldId The WorldID instance that will verify the proofs\n    /// @param _appId The World ID app ID\n    /// @param _actionId The World ID action ID\n    constructor(\n        IWorldID _worldId,\n        string memory _appId,\n        string memory _actionId\n    ) {\n        worldId = _worldId;\n        externalNullifier = abi\n            .encodePacked(abi.encodePacked(_appId).hashToField(), _actionId)\n            .hashToField();\n    }\n\n    /// @param signal An arbitrary input from the user, usually the user's wallet address (check README for further details)\n    /// @param root The root of the Merkle tree (returned by the JS widget).\n    /// @param nullifierHash The nullifier hash for this proof, preventing double signaling (returned by the JS widget).\n    /// @param proof The zero-knowledge proof that demonstrates the claimer is registered with World ID (returned by the JS widget).\n    /// @dev Feel free to rename this method however you want! We've used `claim`, `verify` or `execute` in the past.\n    function registerPatient(\n        address signal,\n        uint256 root,\n        uint256 nullifierHash,\n        uint256[8] calldata proof\n    ) public {\n        // First, we make sure this person hasn't done this before\n        if (nullifierHashes[nullifierHash]) revert InvalidNullifier();\n\n        // We now verify the provided proof is valid and the user is verified by World ID\n        worldId.verifyProof(\n            root,\n            groupId,\n            abi.encodePacked(signal).hashToField(),\n            nullifierHash,\n            externalNullifier,\n            proof\n        );\n\n        // We now record the user has done this, so they can't do it again (proof of uniqueness)\n        nullifierHashes[nullifierHash] = true;\n\n        patients.push(signal);\n\n        // Finally, execute your logic here, for example issue a token, NFT, etc...\n        // Make sure to emit some kind of event afterwards!\n    }\n\n\n    // function registerPatient() public {\n    //     patients.push(msg.sender);\n    // }\n\n    function registerDoctor() public {\n        doctors.push(msg.sender);\n    }\n\n    function getPatients() public view returns (address[] memory) {\n        return patients;\n    }\n\n    function getDoctors() public view returns (address[] memory) {\n        return doctors;\n    }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}