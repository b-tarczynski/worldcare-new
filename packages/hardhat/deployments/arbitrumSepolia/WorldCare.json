{
  "address": "0x4b08828e759212893Fe6978d89f879A39fe1E807",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IWorldID",
          "name": "_worldId",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_appId",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_actionId",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InvalidNullifier",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "doctor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "filesCid",
          "type": "string"
        }
      ],
      "name": "DoctorRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "patient",
          "type": "address"
        }
      ],
      "name": "PatientRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "visitCid",
          "type": "string"
        }
      ],
      "name": "TransactionPaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "patient",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "doctor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "visitCid",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "VisitFinalized",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "doctors",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "doctorsPermissions",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "patient",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "doctor",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "visitCid",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "finalizeVisit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "patients",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "visitCid",
          "type": "string"
        }
      ],
      "name": "payForVisit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "signal",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "root",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nullifierHash",
          "type": "uint256"
        },
        {
          "internalType": "uint256[8]",
          "name": "proof",
          "type": "uint256[8]"
        },
        {
          "internalType": "string",
          "name": "filesCid",
          "type": "string"
        }
      ],
      "name": "registerDoctor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "signal",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "root",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nullifierHash",
          "type": "uint256"
        },
        {
          "internalType": "uint256[8]",
          "name": "proof",
          "type": "uint256[8]"
        }
      ],
      "name": "registerPatient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "doctor",
          "type": "address"
        }
      ],
      "name": "revokeProfile",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "doctor",
          "type": "address"
        }
      ],
      "name": "shareProfile",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "visitdetails",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "paid",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "doctor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "patient",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x615039c3cd0d590e4b6aeb6ff1abafdce29b1756c2a573e932727c91872b35d1",
  "receipt": {
    "to": null,
    "from": "0x9F5eF94605496003D50E0c6d7641969feAc9dd41",
    "contractAddress": "0x4b08828e759212893Fe6978d89f879A39fe1E807",
    "transactionIndex": 1,
    "gasUsed": "1105689",
    "logsBloom": "0x
    "blockHash": "0xe4d42477c4a473de65d9b1cc5313437c64b9faccb6414018cfc90a3f009adf9e",
    "transactionHash": "0x615039c3cd0d590e4b6aeb6ff1abafdce29b1756c2a573e932727c91872b35d1",
    "logs": [],
    "blockNumber": 63691438,
    "cumulativeGasUsed": "1105689",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x58034592879fAFF08fBa5192bFf244f0B8bA6dD9",
    "app_staging_47391015481f14b9ef820719cb4383a7",
    "register-user"
  ],
  "numDeployments": 1,
  "solcInputHash": "c7319050f257c8d243d91259a958246d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IWorldID\",\"name\":\"_worldId\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_appId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_actionId\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidNullifier\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"doctor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"filesCid\",\"type\":\"string\"}],\"name\":\"DoctorRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"patient\",\"type\":\"address\"}],\"name\":\"PatientRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"visitCid\",\"type\":\"string\"}],\"name\":\"TransactionPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"patient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"doctor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"visitCid\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"VisitFinalized\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"doctors\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"doctorsPermissions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"patient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"doctor\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"visitCid\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"finalizeVisit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"patients\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"visitCid\",\"type\":\"string\"}],\"name\":\"payForVisit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"root\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nullifierHash\",\"type\":\"uint256\"},{\"internalType\":\"uint256[8]\",\"name\":\"proof\",\"type\":\"uint256[8]\"},{\"internalType\":\"string\",\"name\":\"filesCid\",\"type\":\"string\"}],\"name\":\"registerDoctor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"root\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nullifierHash\",\"type\":\"uint256\"},{\"internalType\":\"uint256[8]\",\"name\":\"proof\",\"type\":\"uint256[8]\"}],\"name\":\"registerPatient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"doctor\",\"type\":\"address\"}],\"name\":\"revokeProfile\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"doctor\",\"type\":\"address\"}],\"name\":\"shareProfile\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"visitdetails\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"paid\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"doctor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"patient\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_actionId\":\"The World ID action ID\",\"_appId\":\"The World ID app ID\",\"_worldId\":\"The WorldID instance that will verify the proofs\"}},\"registerDoctor(address,uint256,uint256,uint256[8],string)\":{\"details\":\"Feel free to rename this method however you want! We've used `claim`, `verify` or `execute` in the past.\",\"params\":{\"nullifierHash\":\"The nullifier hash for this proof, preventing double signaling (returned by the JS widget).\",\"proof\":\"The zero-knowledge proof that demonstrates the claimer is registered with World ID (returned by the JS widget).\",\"root\":\"The root of the Merkle tree (returned by the JS widget).\",\"signal\":\"An arbitrary input from the user, usually the user's wallet address (check README for further details)\"}},\"registerPatient(address,uint256,uint256,uint256[8])\":{\"details\":\"Feel free to rename this method however you want! We've used `claim`, `verify` or `execute` in the past.\",\"params\":{\"nullifierHash\":\"The nullifier hash for this proof, preventing double signaling (returned by the JS widget).\",\"proof\":\"The zero-knowledge proof that demonstrates the claimer is registered with World ID (returned by the JS widget).\",\"root\":\"The root of the Merkle tree (returned by the JS widget).\",\"signal\":\"An arbitrary input from the user, usually the user's wallet address (check README for further details)\"}}},\"stateVariables\":{\"externalNullifier\":{\"details\":\"The contract's external nullifier hash\"},\"groupId\":{\"details\":\"The World ID group ID (always 1)\"},\"nullifierHashes\":{\"details\":\"Whether a nullifier hash has been used already. Used to guarantee an action is only performed once by a single person\"},\"worldId\":{\"details\":\"The World ID instance that will be used for verifying proofs\"}},\"version\":1},\"userdoc\":{\"errors\":{\"InvalidNullifier()\":[{\"notice\":\"Thrown when attempting to reuse a nullifier\"}]},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/WorldCare.sol\":\"WorldCare\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/WorldCare.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport { ByteHasher } from \\\"./helpers/ByteHasher.sol\\\";\\nimport { IWorldID } from \\\"./interfaces/IWorldID.sol\\\";\\n\\ncontract WorldCare {\\n\\t// address[] public patients;\\n\\t// address[] public doctors;\\n\\n\\tstruct VisitDetails {\\n\\t\\tuint price;\\n\\t\\tbool paid;\\n\\t\\taddress doctor;\\n\\t\\taddress patient;\\n\\t}\\n\\n\\tmapping(address => bool) public patients;\\n\\tmapping(address => bool) public doctors;\\n\\n\\tmapping(string => VisitDetails) public visitdetails;\\n\\n\\tmapping(address => mapping(address => bool)) public doctorsPermissions;\\n\\n\\tusing ByteHasher for bytes;\\n\\n\\t///////////////////////////////////////////////////////////////////////////////\\n\\t///                                  ERRORS                                ///\\n\\t//////////////////////////////////////////////////////////////////////////////\\n\\n\\t/// @notice Thrown when attempting to reuse a nullifier\\n\\terror InvalidNullifier();\\n\\n\\t/// @dev The World ID instance that will be used for verifying proofs\\n\\tIWorldID internal immutable worldId;\\n\\n\\t/// @dev The contract's external nullifier hash\\n\\tuint256 internal immutable externalNullifier;\\n\\n\\t/// @dev The World ID group ID (always 1)\\n\\tuint256 internal immutable groupId = 1;\\n\\n\\t/// @dev Whether a nullifier hash has been used already. Used to guarantee an action is only performed once by a single person\\n\\tmapping(uint256 => bool) internal nullifierHashes;\\n\\n\\tevent DoctorRegistered(address indexed doctor, string filesCid);\\n\\tevent PatientRegistered(address indexed patient);\\n\\tevent VisitFinalized(\\n\\t\\taddress indexed patient,\\n\\t\\taddress indexed doctor,\\n\\t\\tstring visitCid,\\n\\t\\tuint price\\n\\t);\\n\\tevent TransactionPaid(string visitCid);\\n\\n\\t/// @param _worldId The WorldID instance that will verify the proofs\\n\\t/// @param _appId The World ID app ID\\n\\t/// @param _actionId The World ID action ID\\n\\tconstructor(\\n\\t\\tIWorldID _worldId,\\n\\t\\tstring memory _appId,\\n\\t\\tstring memory _actionId\\n\\t) {\\n\\t\\tworldId = _worldId;\\n\\t\\texternalNullifier = abi\\n\\t\\t\\t.encodePacked(abi.encodePacked(_appId).hashToField(), _actionId)\\n\\t\\t\\t.hashToField();\\n\\t}\\n\\n\\t/// @param signal An arbitrary input from the user, usually the user's wallet address (check README for further details)\\n\\t/// @param root The root of the Merkle tree (returned by the JS widget).\\n\\t/// @param nullifierHash The nullifier hash for this proof, preventing double signaling (returned by the JS widget).\\n\\t/// @param proof The zero-knowledge proof that demonstrates the claimer is registered with World ID (returned by the JS widget).\\n\\t/// @dev Feel free to rename this method however you want! We've used `claim`, `verify` or `execute` in the past.\\n\\tfunction registerPatient(\\n\\t\\taddress signal,\\n\\t\\tuint256 root,\\n\\t\\tuint256 nullifierHash,\\n\\t\\tuint256[8] calldata proof\\n\\t) public {\\n\\t\\t// First, we make sure this person hasn't done this before\\n\\t\\tif (nullifierHashes[nullifierHash]) revert InvalidNullifier();\\n\\t\\trequire(!patients[signal], \\\"Patient already registered\\\");\\n\\t\\trequire(!doctors[signal], \\\"Doctor already registered\\\");\\n\\n\\t\\t// We now verify the provided proof is valid and the user is verified by World ID\\n\\t\\tworldId.verifyProof(\\n\\t\\t\\troot,\\n\\t\\t\\tgroupId,\\n\\t\\t\\tabi.encodePacked(signal).hashToField(),\\n\\t\\t\\tnullifierHash,\\n\\t\\t\\texternalNullifier,\\n\\t\\t\\tproof\\n\\t\\t);\\n\\n\\t\\t// We now record the user has done this, so they can't do it again (proof of uniqueness)\\n\\t\\tnullifierHashes[nullifierHash] = true;\\n\\n\\t\\tpatients[signal] = true;\\n\\n\\t\\temit PatientRegistered(signal);\\n\\n\\t\\t// Finally, execute your logic here, for example issue a token, NFT, etc...\\n\\t\\t// Make sure to emit some kind of event afterwards!\\n\\t}\\n\\n\\t// function registerPatient() public {\\n\\t//     patients.push(msg.sender);\\n\\t// }\\n\\n\\t/// @param signal An arbitrary input from the user, usually the user's wallet address (check README for further details)\\n\\t/// @param root The root of the Merkle tree (returned by the JS widget).\\n\\t/// @param nullifierHash The nullifier hash for this proof, preventing double signaling (returned by the JS widget).\\n\\t/// @param proof The zero-knowledge proof that demonstrates the claimer is registered with World ID (returned by the JS widget).\\n\\t/// @dev Feel free to rename this method however you want! We've used `claim`, `verify` or `execute` in the past.\\n\\tfunction registerDoctor(\\n\\t\\taddress signal,\\n\\t\\tuint256 root,\\n\\t\\tuint256 nullifierHash,\\n\\t\\tuint256[8] calldata proof,\\n\\t\\tstring calldata filesCid\\n\\t) public {\\n\\t\\t// First, we make sure this person hasn't done this before\\n\\t\\tif (nullifierHashes[nullifierHash]) revert InvalidNullifier();\\n\\t\\trequire(!patients[signal], \\\"Patient already registered\\\");\\n\\t\\trequire(!doctors[signal], \\\"Doctor already registered\\\");\\n\\t\\t// We now verify the provided proof is valid and the user is verified by World ID\\n\\t\\tworldId.verifyProof(\\n\\t\\t\\troot,\\n\\t\\t\\tgroupId,\\n\\t\\t\\tabi.encodePacked(signal).hashToField(),\\n\\t\\t\\tnullifierHash,\\n\\t\\t\\texternalNullifier,\\n\\t\\t\\tproof\\n\\t\\t);\\n\\n\\t\\t// We now record the user has done this, so they can't do it again (proof of uniqueness)\\n\\t\\tnullifierHashes[nullifierHash] = true;\\n\\n\\t\\tdoctors[signal] = true;\\n\\n\\t\\temit DoctorRegistered(signal, filesCid);\\n\\n\\t\\t// Finally, execute your logic here, for example issue a token, NFT, etc...\\n\\t\\t// Make sure to emit some kind of event afterwards!\\n\\t}\\n\\n\\tfunction finalizeVisit(\\n\\t\\taddress patient,\\n\\t\\taddress doctor,\\n\\t\\tstring calldata visitCid,\\n\\t\\tuint price\\n\\t) public {\\n\\t\\trequire(doctors[doctor], \\\"Only doctors can add documents\\\");\\n\\t\\trequire(patients[patient], \\\"Only patients can have documents\\\");\\n        require(doctorsPermissions[doctor][patient], \\\"Doctor does not have permission to access patient's profile\\\");\\n\\t\\tvisitdetails[visitCid] = VisitDetails(price, false, doctor, patient);\\n\\t\\temit VisitFinalized(patient, doctor, visitCid, price);\\n\\t}\\n\\n\\tfunction shareProfile(address doctor) public {\\n\\t\\trequire(doctors[doctor], \\\"Only doctors can be shared with\\\");\\n\\t\\trequire(patients[msg.sender], \\\"Only patients can share their profile\\\");\\n\\t\\tdoctorsPermissions[doctor][msg.sender] = true;\\n\\t}\\n\\n\\tfunction revokeProfile(address doctor) public {\\n\\t\\trequire(doctors[doctor], \\\"Only doctors can be shared with\\\");\\n\\t\\trequire(patients[msg.sender], \\\"Only patients can share their profile\\\");\\n\\t\\tdoctorsPermissions[doctor][msg.sender] = false;\\n\\t}\\n\\n\\tfunction payForVisit(string calldata visitCid) public payable {\\n\\t\\trequire(patients[msg.sender], \\\"Only patients can pay for visits\\\");\\n\\t\\trequire(\\n\\t\\t\\tvisitdetails[visitCid].patient == msg.sender,\\n\\t\\t\\t\\\"Only the patient can pay for the visit\\\"\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\tvisitdetails[visitCid].paid == false,\\n\\t\\t\\t\\\"The visit has already been paid for\\\"\\n\\t\\t);\\n\\t\\trequire(visitdetails[visitCid].price == msg.value, \\\"Bad value\\\");\\n\\t\\t// Transfer the payment to the doctor\\n\\t\\tpayable(visitdetails[visitCid].doctor).transfer(msg.value);\\n\\t\\t// Mark the visit as paid\\n\\t\\tvisitdetails[visitCid].paid = true;\\n\\t\\trevokeProfile(visitdetails[visitCid].doctor);\\n\\t\\temit TransactionPaid(visitCid);\\n\\t}\\n}\\n\",\"keccak256\":\"0xbb349ce019baa86f29aaa832fd5848f3ff7a4cbbe09f7c3533bf9ae445c5fb85\",\"license\":\"MIT\"},\"contracts/helpers/ByteHasher.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nlibrary ByteHasher {\\n    /// @dev Creates a keccak256 hash of a bytestring.\\n    /// @param value The bytestring to hash\\n    /// @return The hash of the specified value\\n    /// @dev `>> 8` makes sure that the result is included in our field\\n    function hashToField(bytes memory value) internal pure returns (uint256) {\\n        return uint256(keccak256(abi.encodePacked(value))) >> 8;\\n    }\\n}\\n\",\"keccak256\":\"0x225f0627ac21d07df35533f605936035d74aa0f05a632cb8d150d3af50408cd0\",\"license\":\"MIT\"},\"contracts/interfaces/IWorldID.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\ninterface IWorldID {\\n    /// @notice Reverts if the zero-knowledge proof is invalid.\\n    /// @param root The of the Merkle tree\\n    /// @param groupId The id of the Semaphore group\\n    /// @param signalHash A keccak256 hash of the Semaphore signal\\n    /// @param nullifierHash The nullifier hash\\n    /// @param externalNullifierHash A keccak256 hash of the external nullifier\\n    /// @param proof The zero-knowledge proof\\n    /// @dev  Note that a double-signaling check is not included here, and should be carried by the caller.\\n    function verifyProof(\\n        uint256 root,\\n        uint256 groupId,\\n        uint256 signalHash,\\n        uint256 nullifierHash,\\n        uint256 externalNullifierHash,\\n        uint256[8] calldata proof\\n    ) external view;\\n}\\n\",\"keccak256\":\"0x20fc12dea0b817fb8b7bc1a851082676ed2dcb844d3673d60aa5570da3e1b62e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106100915760003560e01c806344977ba81161005957806344977ba81461016b57806354e260021461018b57806367f9dc40146101ab578063a9583c22146101cb578063f08099a7146101fb57600080fd5b80630869cfbc146100965780631dfa01c8146100db5780631fc4e3c4146100fd5780633a631019146101105780633e75332914610130575b600080fd5b3480156100a257600080fd5b506100c66100b1366004610e89565b60006020819052908152604090205460ff1681565b60405190151581526020015b60405180910390f35b3480156100e757600080fd5b506100fb6100f6366004610f0c565b61028c565b005b6100fb61010b366004610f87565b610515565b34801561011c57600080fd5b506100fb61012b366004610fc9565b6107f2565b34801561013c57600080fd5b506100c661014b366004611011565b600360209081526000928352604080842090915290825290205460ff1681565b34801561017757600080fd5b506100fb610186366004610e89565b610a4c565b34801561019757600080fd5b506100fb6101a6366004610e89565b610b12565b3480156101b757600080fd5b506100fb6101c6366004611044565b610bd5565b3480156101d757600080fd5b506100c66101e6366004610e89565b60016020526000908152604090205460ff1681565b34801561020757600080fd5b5061025d6102163660046110c3565b80518082016020908101805160028083529383019290940191909120929052815460018301549290910154909160ff8116916001600160a01b036101009092048216911684565b6040805194855292151560208501526001600160a01b03918216928401929092521660608201526080016100d2565b60008481526004602052604090205460ff16156102bc57604051632ec8265960e11b815260040160405180910390fd5b6001600160a01b03861660009081526020819052604090205460ff161561032a5760405162461bcd60e51b815260206004820152601a60248201527f50617469656e7420616c7265616479207265676973746572656400000000000060448201526064015b60405180910390fd5b6001600160a01b03861660009081526001602052604090205460ff161561038f5760405162461bcd60e51b8152602060048201526019602482015278111bd8dd1bdc88185b1c9958591e481c9959da5cdd195c9959603a1b6044820152606401610321565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633bc778e3867f00000000000000000000000000000000000000000000000000000000000000006104208a60405160200161040c919060609190911b6bffffffffffffffffffffffff1916815260140190565b604051602081830303815290604052610e38565b887f0000000000000000000000000000000000000000000000000000000000000000896040518763ffffffff1660e01b815260040161046496959493929190611174565b60006040518083038186803b15801561047c57600080fd5b505afa158015610490573d6000803e3d6000fd5b50505060008581526004602090815260408083208054600160ff1991821681179092556001600160a01b038c16808652938290529382902080549094161790925590519091507f20481b8112b5bf4734f45a473c373db9df6a79ce946cdc0e7dbc22b4f7d7f9869061050590859085906111d5565b60405180910390a2505050505050565b3360009081526020819052604090205460ff166105745760405162461bcd60e51b815260206004820181905260248201527f4f6e6c792070617469656e74732063616e2070617920666f72207669736974736044820152606401610321565b336001600160a01b0316600283836040516105909291906111f1565b908152604051908190036020019020600201546001600160a01b0316146106085760405162461bcd60e51b815260206004820152602660248201527f4f6e6c79207468652070617469656e742063616e2070617920666f7220746865604482015265081d9a5cda5d60d21b6064820152608401610321565b6002828260405161061a9291906111f1565b9081526040519081900360200190206001015460ff16156106895760405162461bcd60e51b815260206004820152602360248201527f5468652076697369742068617320616c7265616479206265656e2070616964206044820152623337b960e91b6064820152608401610321565b346002838360405161069c9291906111f1565b90815260405190819003602001902054146106e55760405162461bcd60e51b81526020600482015260096024820152684261642076616c756560b81b6044820152606401610321565b600282826040516106f79291906111f1565b908152604051908190036020018120600101546001600160a01b0361010090910416903480156108fc02916000818181858888f19350505050158015610741573d6000803e3d6000fd5b506001600283836040516107569291906111f1565b908152604051908190036020018120600101805492151560ff19909316929092179091556107b59060029061078e90859085906111f1565b908152604051908190036020019020600101546001600160a01b0361010090910416610b12565b7fd757fedcb09efe5b76f279e0610c6c768ab20d16f1c2cd3bef6ca85f1298af2682826040516107e69291906111d5565b60405180910390a15050565b60008281526004602052604090205460ff161561082257604051632ec8265960e11b815260040160405180910390fd5b6001600160a01b03841660009081526020819052604090205460ff161561088b5760405162461bcd60e51b815260206004820152601a60248201527f50617469656e7420616c726561647920726567697374657265640000000000006044820152606401610321565b6001600160a01b03841660009081526001602052604090205460ff16156108f05760405162461bcd60e51b8152602060048201526019602482015278111bd8dd1bdc88185b1c9958591e481c9959da5cdd195c9959603a1b6044820152606401610321565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633bc778e3847f000000000000000000000000000000000000000000000000000000000000000061096d8860405160200161040c919060609190911b6bffffffffffffffffffffffff1916815260140190565b867f0000000000000000000000000000000000000000000000000000000000000000876040518763ffffffff1660e01b81526004016109b196959493929190611174565b60006040518083038186803b1580156109c957600080fd5b505afa1580156109dd573d6000803e3d6000fd5b50505060008381526004602090815260408083208054600160ff1991821681179092556001600160a01b038a168086529385905282852080549091169091179055519092507fc9fa2003fca4ce0dfc8cb0deae32266b715536df6685365b05b5be96ede8e49c9190a250505050565b6001600160a01b03811660009081526001602052604090205460ff16610ab45760405162461bcd60e51b815260206004820152601f60248201527f4f6e6c7920646f63746f72732063616e206265207368617265642077697468006044820152606401610321565b3360009081526020819052604090205460ff16610ae35760405162461bcd60e51b815260040161032190611201565b6001600160a01b031660009081526003602090815260408083203384529091529020805460ff19166001179055565b6001600160a01b03811660009081526001602052604090205460ff16610b7a5760405162461bcd60e51b815260206004820152601f60248201527f4f6e6c7920646f63746f72732063616e206265207368617265642077697468006044820152606401610321565b3360009081526020819052604090205460ff16610ba95760405162461bcd60e51b815260040161032190611201565b6001600160a01b031660009081526003602090815260408083203384529091529020805460ff19169055565b6001600160a01b03841660009081526001602052604090205460ff16610c3d5760405162461bcd60e51b815260206004820152601e60248201527f4f6e6c7920646f63746f72732063616e2061646420646f63756d656e747300006044820152606401610321565b6001600160a01b03851660009081526020819052604090205460ff16610ca55760405162461bcd60e51b815260206004820181905260248201527f4f6e6c792070617469656e74732063616e206861766520646f63756d656e74736044820152606401610321565b6001600160a01b0380851660009081526003602090815260408083209389168352929052205460ff16610d405760405162461bcd60e51b815260206004820152603b60248201527f446f63746f7220646f6573206e6f742068617665207065726d697373696f6e2060448201527f746f206163636573732070617469656e7427732070726f66696c6500000000006064820152608401610321565b60408051608081018252828152600060208201526001600160a01b0380871682840152871660608201529051600290610d7c90869086906111f1565b90815260408051602092819003830181208451815592840151600184018054938601516001600160a81b0319909416911515610100600160a81b031916919091176101006001600160a01b0394851602179055606090930151600290920180546001600160a01b0319169282169290921790915585811691908716907ff9e366fa20a652bd81245ff44fdc24c613a235a81cfe48c44c01121e0c6d319490610e2990879087908790611246565b60405180910390a35050505050565b6000600882604051602001610e4d919061126a565b60408051601f198184030181529190528051602090910120901c92915050565b80356001600160a01b0381168114610e8457600080fd5b919050565b600060208284031215610e9b57600080fd5b610ea482610e6d565b9392505050565b806101008101831015610ebd57600080fd5b92915050565b60008083601f840112610ed557600080fd5b50813567ffffffffffffffff811115610eed57600080fd5b602083019150836020828501011115610f0557600080fd5b9250929050565b6000806000806000806101808789031215610f2657600080fd5b610f2f87610e6d565b95506020870135945060408701359350610f4c8860608901610eab565b925061016087013567ffffffffffffffff811115610f6957600080fd5b610f7589828a01610ec3565b979a9699509497509295939492505050565b60008060208385031215610f9a57600080fd5b823567ffffffffffffffff811115610fb157600080fd5b610fbd85828601610ec3565b90969095509350505050565b6000806000806101608587031215610fe057600080fd5b610fe985610e6d565b935060208501359250604085013591506110068660608701610eab565b905092959194509250565b6000806040838503121561102457600080fd5b61102d83610e6d565b915061103b60208401610e6d565b90509250929050565b60008060008060006080868803121561105c57600080fd5b61106586610e6d565b945061107360208701610e6d565b9350604086013567ffffffffffffffff81111561108f57600080fd5b61109b88828901610ec3565b96999598509660600135949350505050565b634e487b7160e01b600052604160045260246000fd5b6000602082840312156110d557600080fd5b813567ffffffffffffffff808211156110ed57600080fd5b818401915084601f83011261110157600080fd5b813581811115611113576111136110ad565b604051601f8201601f19908116603f0116810190838211818310171561113b5761113b6110ad565b8160405282815287602084870101111561115457600080fd5b826020860160208301376000928101602001929092525095945050505050565b60006101a0820190508782528660208301528560408301528460608301528360808301526101008360a0840137979650505050505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6020815260006111e96020830184866111ac565b949350505050565b8183823760009101908152919050565b60208082526025908201527f4f6e6c792070617469656e74732063616e2073686172652074686569722070726040820152646f66696c6560d81b606082015260800190565b60408152600061125a6040830185876111ac565b9050826020830152949350505050565b6000825160005b8181101561128b5760208186018101518583015201611271565b50600092019182525091905056fea2646970667358221220d9e921dcbbec70d0b4f6c4c26b6d5eff729f895a36243e808ae4b19a18b8737e64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_actionId": "The World ID action ID",
          "_appId": "The World ID app ID",
          "_worldId": "The WorldID instance that will verify the proofs"
        }
      },
      "registerDoctor(address,uint256,uint256,uint256[8],string)": {
        "details": "Feel free to rename this method however you want! We've used `claim`, `verify` or `execute` in the past.",
        "params": {
          "nullifierHash": "The nullifier hash for this proof, preventing double signaling (returned by the JS widget).",
          "proof": "The zero-knowledge proof that demonstrates the claimer is registered with World ID (returned by the JS widget).",
          "root": "The root of the Merkle tree (returned by the JS widget).",
          "signal": "An arbitrary input from the user, usually the user's wallet address (check README for further details)"
        }
      },
      "registerPatient(address,uint256,uint256,uint256[8])": {
        "details": "Feel free to rename this method however you want! We've used `claim`, `verify` or `execute` in the past.",
        "params": {
          "nullifierHash": "The nullifier hash for this proof, preventing double signaling (returned by the JS widget).",
          "proof": "The zero-knowledge proof that demonstrates the claimer is registered with World ID (returned by the JS widget).",
          "root": "The root of the Merkle tree (returned by the JS widget).",
          "signal": "An arbitrary input from the user, usually the user's wallet address (check README for further details)"
        }
      }
    },
    "stateVariables": {
      "externalNullifier": {
        "details": "The contract's external nullifier hash"
      },
      "groupId": {
        "details": "The World ID group ID (always 1)"
      },
      "nullifierHashes": {
        "details": "Whether a nullifier hash has been used already. Used to guarantee an action is only performed once by a single person"
      },
      "worldId": {
        "details": "The World ID instance that will be used for verifying proofs"
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "InvalidNullifier()": [
        {
          "notice": "Thrown when attempting to reuse a nullifier"
        }
      ]
    },
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 18,
        "contract": "contracts/WorldCare.sol:WorldCare",
        "label": "patients",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 22,
        "contract": "contracts/WorldCare.sol:WorldCare",
        "label": "doctors",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 27,
        "contract": "contracts/WorldCare.sol:WorldCare",
        "label": "visitdetails",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_string_memory_ptr,t_struct(VisitDetails)14_storage)"
      },
      {
        "astId": 33,
        "contract": "contracts/WorldCare.sol:WorldCare",
        "label": "doctorsPermissions",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 55,
        "contract": "contracts/WorldCare.sol:WorldCare",
        "label": "nullifierHashes",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_string_memory_ptr,t_struct(VisitDetails)14_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => struct WorldCare.VisitDetails)",
        "numberOfBytes": "32",
        "value": "t_struct(VisitDetails)14_storage"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(VisitDetails)14_storage": {
        "encoding": "inplace",
        "label": "struct WorldCare.VisitDetails",
        "members": [
          {
            "astId": 7,
            "contract": "contracts/WorldCare.sol:WorldCare",
            "label": "price",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9,
            "contract": "contracts/WorldCare.sol:WorldCare",
            "label": "paid",
            "offset": 0,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 11,
            "contract": "contracts/WorldCare.sol:WorldCare",
            "label": "doctor",
            "offset": 1,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 13,
            "contract": "contracts/WorldCare.sol:WorldCare",
            "label": "patient",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}